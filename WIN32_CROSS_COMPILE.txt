Instructions for building for win32 using cross-compilation

Tested on Debian Sarge

1) Install jhbuild, unzip, libglib2.0-dev (for glib-genmarshal),
mingw32-binutils, mingw32-runtime and nsis packages via APT
jhbuild needs to be at least version 2.30.2 for .tar.xz file support.

2) Mingw32 compiler

You need the right version of mingw32 (mingw32, not gcc-mingw32 in Ubuntu natty is built
with --disable-shared, which breaks C++ exception handling. See
http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=625778). I haven't tried
OpenSuse's mingw32 to see if it has the same problem.
As of 10 Mar 2012, Debian's mingw32 package doesn't have the required shared
version of libgcc_s, and needs rebuilding with a patch to provide it.
Basically, check that the version of mingw32 you have installs a libgcc_s.a
and provides libgcc_sjlj_1.dll.

Even better, is to rebuild mingw32 to use DWARF style exception handling, as
well as shared libgcc (in which case, you'll have libgcc_dw2_1.dll instead of
libgcc_sjlj_1.dll and you have to replace the line
  ${File} "${BUILD_OUTPUT_DIR}\bin\" "libgcc_sjlj_1.dll"
by
  ${File} "${BUILD_OUTPUT_DIR}\bin\" "libgcc_dw2_1.dll"
in repsnapper.nsi.in (win32 dir)
(TBD: Expand these instructions)

3) make distclean in the toplevel directory to unconfigure it, if you've been
building there already. It needs to be unconfigured for the cross compile done by
the script in the next step.
4) cd into win32 and run either cross-build-repsnapper-rls (Release version) or
cross-build-repsnapper-dbg (Debug)

Hopefully, it all runs succesfully - at which point there should be a usable tree in
win32/checkout.rls (or checkout.dbg)

The result executable should be in win32/target.dbg/bin/repsnapper.exe

In case of rls an installer exe will be built in the win32 directory.

